// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createAssociated = `-- name: CreateAssociated :exec
INSERT INTO
  associated (number_card, name)
VALUES
  (?, ?)
`

type CreateAssociatedParams struct {
	NumberCard int64
	Name       string
}

func (q *Queries) CreateAssociated(ctx context.Context, arg CreateAssociatedParams) error {
	_, err := q.db.ExecContext(ctx, createAssociated, arg.NumberCard, arg.Name)
	return err
}

const deleteAssociatedByNumberCard = `-- name: DeleteAssociatedByNumberCard :execresult
DELETE FROM associated
WHERE
  number_card = ?
`

func (q *Queries) DeleteAssociatedByNumberCard(ctx context.Context, numberCard int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAssociatedByNumberCard, numberCard)
}

const getAssociated = `-- name: GetAssociated :many
SELECT
  number_card, name
FROM
  associated
`

func (q *Queries) GetAssociated(ctx context.Context) ([]Associated, error) {
	rows, err := q.db.QueryContext(ctx, getAssociated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Associated
	for rows.Next() {
		var i Associated
		if err := rows.Scan(&i.NumberCard, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
