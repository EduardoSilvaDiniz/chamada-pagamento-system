// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
)

const createAssoc = `-- name: CreateAssoc :exec
INSERT INTO
  associated (cpf, name, date_birth, marital_status)
VALUES
  ($1, $2, $3, $4)
`

type CreateAssocParams struct {
	Cpf           string
	Name          string
	DateBirth     string
	MaritalStatus string
}

func (q *Queries) CreateAssoc(ctx context.Context, arg CreateAssocParams) error {
	_, err := q.db.Exec(ctx, createAssoc,
		arg.Cpf,
		arg.Name,
		arg.DateBirth,
		arg.MaritalStatus,
	)
	return err
}

const deleteAssoc = `-- name: DeleteAssoc :exec
DELETE FROM associated
WHERE
  (cpf=$1)
`

func (q *Queries) DeleteAssoc(ctx context.Context, cpf string) error {
	_, err := q.db.Exec(ctx, deleteAssoc, cpf)
	return err
}

const getAssoc = `-- name: GetAssoc :many
SELECT
  cpf, name, date_birth, marital_status
FROM
  associated
`

func (q *Queries) GetAssoc(ctx context.Context) ([]Associated, error) {
	rows, err := q.db.Query(ctx, getAssoc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Associated
	for rows.Next() {
		var i Associated
		if err := rows.Scan(
			&i.Cpf,
			&i.Name,
			&i.DateBirth,
			&i.MaritalStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
